/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 

 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory location specified by address.
 * If load==1, the in value is loaded into the memory location specified by address.
 * This value becomes available through the out output from the next time step onward.

 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid.
 * Access to any address in the range 0x4000-0x5FFF results in accessing the screen memory map.
 * Access to address 0x6000 results in accessing the keyboard memory map.
 * The behavior in these addresses is described in the Screen and Keyboard chip specifications given in the book.
 */

/*
    一般来说，整个内存地址空间被划分为4个独立的子空间。数据内存、指令内存、键盘内存映像、屏幕内存映像 各占用一个子空间。

    Hack计算机平台的Memory芯片主要由三个底层的芯片构成：RAM16K、Screen、Keyboard。用作数据内存。
*/
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux4Way(in=load, sel=address[13..14], a=loadram1, b=loadram2, c=loadscreen, d=loadkbd);
	Or(a=loadram1, b=loadram2, out=loadram);
    RAM16K(in=in, load=loadram, address=address[0..13], out=ramout); //16K即 2的4次方 乘以 2的10次方 =2的14次方
    Screen(in=in, load=loadscreen, address=address[0..12], out=scrout);
    Keyboard(out=kbout);
    Mux4Way16(a=ramout, b=ramout, c=scrout, d=kbout, sel=address[13..14], out=out);
}